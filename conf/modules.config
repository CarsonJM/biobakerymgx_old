/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: KNEADDATA_DATABASE {
        ext.args = [
            "${params.kneaddata_db_type}"
        ].join(' ').trim()
        storeDir = "${params.database_dir}"
    }

    withName: KNEADDATA_KNEADDATA {
        ext.args = [
            params.kd_bypass_trim ? "--bypass-trim" : "",
            params.kd_run_trim_repetitive ? "--run-trim-repetitive" : "",
            "--trimmomatic ${params.kd_trimmomatic_path}",
            params.kd_trimmomatic_options ? "--trimmomatic-options ${params.kd_trimmomatic_options}" : "",
            params.kd_sequencer_source ? "--sequencer-source ${params.kd_sequencer_source}" : "",
            params.kd_decontaminate_pairs ? "--decontaminate-pairs ${params.kd_decontaminate_pairs}" : "",
            params.kd_bypass_trf ? "--bypass-trf" : "",
            params.kd_trf_path ? "--trf ${params.kd_trf_path}" : "",
            params.kd_match ? "--match ${params.kd_match}" : "",
            params.kd_mismatch ? "--mismatch ${params.kd_mismatch}" : "",
            params.kd_delta ? "--delta ${params.kd_delta}" : "",
            params.kd_pm ? "--pm ${params.kd_pm}" : "",
            params.kd_pi ? "--pi ${params.kd_pi}" : "",
            params.kd_minscore ? "--minscore ${params.kd_minscore}" : "",
            params.kd_maxperiod ? "--maxperiod ${params.kd_maxperiod}" : "",
            params.kd_store_temp_output ? "--store-temp-output" : "",
            params.kd_remove_intermediate_output ? "--remove-intermediate-output" : ""
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/01_READ_PREPROCESSING/01_kneaddata" } ,
            mode: params.publish_dir_mode ,
            pattern: '*paired_{1,2}.fastq.gz'
        ]
    }

    withName: KNEADDATA_COMBINEREADCOUNTS {
        publishDir = [
            path: { "${params.outdir}/01_READ_PREPROCESSING/" } ,
            mode: params.publish_dir_mode ,
            pattern: 'combined_read_count_table.tsv'
        ]
    }

    withName: METAPHLAN_DATABASE {
        storeDir = "${params.database_dir}"
    }

    withName: METAPHLAN_METAPHLAN {
        ext.args = [
            params.mpa_min_mapq_val ? "--min_mapq_val ${params.mpa_min_mapq_val}" : "",
            params.mpa_tax_lev ? "--tax_lev ${params.mpa_tax_lev}" : "",
            params.mpa_min_cu_len ? "--min_cu_len ${params.mpa_min_cu_len}" : "",
            params.mpa_min_alignment_len ? "--min_alignment_len ${params.mpa_min_alignment_len}" : "",
            params.mpa_add_viruses ? "--add_viruses" : "",
            params.mpa_ignore_eukaryotes ? "--ignore_eukaryotes" : "",
            params.mpa_ignore_bacteria ? "--ignore_bacteria" : "",
            params.mpa_ignore_archaea ? "--ignore_archaea" : "",
            params.mpa_ignore_ksgbs ? "--ignore_ksgbs" : "",
            params.mpa_ignore_usgbs ? "--ignore_usgbs" : "",
            params.mpa_stat_q ? "--stat_q ${params.mpa_stat_q}" : "",
            params.mpa_perc_nonzero ? "--perc_nonzero ${params.mpa_perc_nonzero}" : "",
            params.mpa_ignore_markers ? "--ignore_markers ${params.mpa_file_w_markers_to_ignore}" : "",
            params.mpa_avoid_disqm ? "--avoid_disqm" : "",
            params.mpa_stat ? "--stat ${params.mpa_stat}" : "",
            params.mpa_t ? "-t ${params.mpa_t}" : "",
            params.mpa_unclassified_estimation ? "--unclassified_estimation" : "",
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/02_TAXONOMIC_PROFILING/01_metaphlan" } ,
            mode: params.publish_dir_mode ,
            pattern: 'combined_metaphlan_profile.txt'
        ]
    }

    withName: METAPHLAN_MERGETABLES {
        publishDir = [
            path: { "${params.outdir}/02_TAXONOMIC_PROFILING/" } ,
            mode: params.publish_dir_mode ,
            pattern: 'combined_metaphlan_profile.txt'
        ]
    }

    withName: HUMANN_CHOCOPHLANDB {
        storeDir = "${params.database_dir}"
    }

    withName: HUMANN_UNIREFDB {
        storeDir = "${params.database_dir}"
    }

    withName: HUMANN_UTILITYMAPPINGDB {
        storeDir = "${params.database_dir}"
    }

    withName: HUMANN_HUMANN {
        ext.args = [
            params.hum_bypass_nucleotide_search ? "--bypass-nucleotide-search" : "",
            params.hum_bypass_prescreen ? "--bypass-prescreen" : "",
            params.hum_prescreen_threshold ? "--prescreen-threshold ${params.hum_prescreen_threshold}" : "",
            params.hum_nucleotide_identity_threshold ? "--nucleotide-identity-threshold ${params.hum_nucleotide_identity_threshold}" : "",
            params.hum_nucleotide_query_coverage_threshold ? "--nucleotide-query-coverage-threshold ${params.hum_nucleotide_query_coverage_threshold}" : "",
            params.hum_nucleotide_subject_coverage_threshold ? "--nucleotide-subject-coverage-threshold ${params.hum_nucleotide_subject_coverage_threshold}" : "",
            params.hum_bypass_translated_search ? "--bypass-translated-search" : "",
            params.hum_evalue ? "--evalue ${params.hum_evalue}" : "",
            params.hum_translated_query_coverage_threshold ? "--translated-query-coverage-threshold ${params.hum_translated_query_coverage_threshold}" : "",
            params.hum_translated_subject_coverage_threshold ? "--translated-subject-coverage-threshold ${params.hum_translated_subject_coverage_threshold}" : "",
            params.hum_gap_fill ? "--gap-fill ${params.hum_gap_fill}" : "",
            params.hum_minpath ? "--minpath ${params.hum_minpath}" : "",
            params.hum_remove_temp_output ? "--remove-temp-output" : ""
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/03_FUNCTIONAL_PROFILING/01_humann" } ,
            mode: params.publish_dir_mode ,
            pattern: '*.tsv'
        ]
    }

    withName: HUMANN_REGROUP {
        publishDir = [
            path: { "${params.outdir}/03_FUNCTIONAL_PROFILING/02_regroup" } ,
            mode: params.publish_dir_mode ,
            pattern: "*.tsv"
        ]
    }

    withName: HUMANN_REGROUPJOINTABLES {
        publishDir = [
            path: { "${params.outdir}/03_FUNCTIONAL_PROFILING/" } ,
            mode: params.publish_dir_mode ,
            pattern: "*.tsv"
        ]
    }

    withName: HUMANN_REGROUPRENORM {
        publishDir = [
            path: { "${params.outdir}/03_FUNCTIONAL_PROFILING/02_regroup" } ,
            mode: params.publish_dir_mode ,
            pattern: "*.tsv"
        ]
    }

    withName: HUMANN_JOINTABLES {
        publishDir = [
            path: { "${params.outdir}/03_FUNCTIONAL_PROFILING/" } ,
            mode: params.publish_dir_mode ,
            pattern: '*.tsv'
        ]
    }

    withName: HUMANN_RENORM {
        publishDir = [
            path: { "${params.outdir}/03_FUNCTIONAL_PROFILING/01_humann" } ,
            mode: params.publish_dir_mode ,
            pattern: '*.tsv'
        ]
    }

    withName: HUMANN_RENORMJOINTABLES {
        publishDir = [
            path: { "${params.outdir}/03_FUNCTIONAL_PROFILING" } ,
            mode: params.publish_dir_mode ,
            pattern: '*.tsv'
        ]
    }

    

    // withName: STRAINPHLAN_EXTRACTMARKERS {
    //     storeDir = "${params.database_dir}/strainphlan_databases"
    // }

    // withName: STRAINPHLAN_STRAINPHLAN {
    //     publishDir = [
    //         path: { "${params.outdir}/04_STRAIN_PROFILING/" } ,
    //         mode: params.publish_dir_mode ,
    //         pattern: '*'
    //     ]
    // }

    // withName: PANPHLAN_DOWNLOADPANGENOME {
    //     storeDir = "${params.database_dir}"
    // }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
