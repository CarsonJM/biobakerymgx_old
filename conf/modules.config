/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: KNEADDATA_DATABASE {
        ext.args = [
            params.kneaddata_db_type ? params.kneaddata_db_type : ''
        ].join(' ').trim()
        storeDir = "${params.database_dir}"
    }

    withName: KNEADDATA_KNEADDATA {
        ext.args = [
            params.kneaddata_options ? params.kneaddata_options : ''
        ].join(' ').trim()
    }

    withName: KNEADDATA_COMBINEREADCOUNTS {
        publishDir = [
            path: { "${params.outdir}/01_READ_PREPROCESSING/" } ,
            mode: params.publish_dir_mode ,
            pattern: 'combined_read_count_table.tsv'
        ]
    }

    withName: METAPHLAN_DATABASE {
        storeDir = "${params.database_dir}"
    }

    withName: METAPHLAN_METAPHLAN {
        ext.args = [
            params.metaphlan_options ? params.metaphlan_options : ''
        ].join(' ').trim()
    }

    withName: METAPHLAN_MERGETABLES {
        publishDir = [
            path: { "${params.outdir}/02_TAXONOMIC_PROFILING/" } ,
            mode: params.publish_dir_mode ,
            pattern: 'combined_metaphlan_profile.txt'
        ]
    }

    withName: HUMANN_CHOCOPHLANDB {
        storeDir = "${params.database_dir}"
    }

    withName: HUMANN_UNIREFDB {
        storeDir = "${params.database_dir}"
    }

    withName: HUMANN_UTILITYMAPPINGDB {
        storeDir = "${params.database_dir}"
    }

    withName: HUMANN_HUMANN {
        ext.args = [
            params.humann_options ? params.humann_options : ''
        ].join(' ').trim()
    }

    withName: HUMANN_REGROUPJOINTABLES {
        publishDir = [
            path: { "${params.outdir}/03_FUNCTIONAL_PROFILING/" } ,
            mode: params.publish_dir_mode ,
            pattern: "*.tsv"
        ]
    }

    withName: HUMANN_JOINTABLES {
        publishDir = [
            path: { "${params.outdir}/03_FUNCTIONAL_PROFILING/" } ,
            mode: params.publish_dir_mode ,
            pattern: '*.tsv'
        ]
    }

    withName: HUMANN_RENORMJOINTABLES {
        publishDir = [
            path: { "${params.outdir}/03_FUNCTIONAL_PROFILING" } ,
            mode: params.publish_dir_mode ,
            pattern: '*.tsv'
        ]
    }

    withName: STRAINPHLAN_STRAINPHLAN {
        publishDir = [
            path: { "${params.outdir}/04_STRAIN_PROFILING/" } ,
            mode: params.publish_dir_mode ,
            pattern: '*'
        ]
    }

    withName: PANPHLAN_DOWNLOADPANGENOME {
        storeDir = "${params.database_dir}"
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
