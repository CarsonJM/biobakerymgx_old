/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/biobakerymgx Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // TODO nf-core: Specify your pipeline's command line flags
    // Input options
    input                      = null
    database_dir = '/gscratch/pedslabs/Labs/Hoffman/resources'

    // KneadData options
    run_kneaddata = true // if false, preprocessed reads should be input into pipeline
    // KneadData Trimmomatic
    bypass_trim = false // if true, trimmed reads should be input into pipeline
    run_trim_repetitive = false
    trimmomatic_path = '/usr/local/share/trimmomatic-0.39-2'
    trimmomatic_options = "'MINLEN:60 ILLUMINACLIP:/-SE.fa:2:30:10 SLIDINGWINDOW:4:20 MINLEN:50'"
    sequencer_source = 'NexteraPE'
    // Contaminant options
    kneaddata_db_type = 'human_genome'
    bowtie2_options = '"--very-sensitive-local"'
    decontaminate_pairs = 'strict'
    // TRF options
    bypass_trf = true
    trf_path = 'NA'
    match = 2
    mismatch = 7
    delta = 7
    pm = 80
    // pi = 10
    minscore = 50
    maxperiod = 500
    // General options
    store_temp_output = false
    remove_intermediate_output = true

    // MetaPhlAn4 options
    run_metaphlan = true
    metaphlan_db_version = 'mpa_vJan21_CHOCOPhlAnSGB_202103'
    bt2_ps = 'very-sensitive'
    min_mapq_val = 5
    tax_lev = 'a'
    min_cu_len = 2000
    min_alignment_len = 'None'
    add_viruses = false
    ignore_eukaryotes = false
    ignore_bacteria = false
    ignore_archaea = false
    ignore_ksgbs = false
    ignore_usgbs = false
    stat_q = 0.2
    perc_nonzero = 0.33
    ignore_markers = 'None'
    avoid_disqm = false
    stat = 'tavg_g'
    t = 'relab'
    unclassified_estimation = true


    // HUMNanN3 options
    run_humann = true // if run_humann = true, run_metaphlan will be set to true
    bypass_nucleotide_search = false
    bypass_prescreen = false
    prescreen_threshold = 0.01
    humann_bowtie2_options = '--very-sensitive'
    nucleotide_identity_threshold = 0
    nucleotide_query_coverage_threshold = 90
    nucleotide_subject_coverage_threshold = 50
    bypass_translated_search = false
    diamond_options = '--top 1 --outfmt 6'
    evalue = 1
    translated_query_coverage_threshold = 90
    translated_subject_coverage_threshold = 50
    gap_fill = 'on'
    minpath = 'on'
    // downstream options
    regroup_gene_families = false
    regroup_option = 'map_ko_uniref90.txt.gz'
    renorm_output = false
    renorm_option = 'relab'
    remove_temp_output = true

    // StrainPhlAn4 options
    run_strainphlan = false // if true, run_metaphlan will be set to true
    strainphlan_species = 't__SGB1855_group'
    // samples2markers options
    breadth_threshold = 80
    min_reads_aligning = 9
    min_base_coverage = 1
    min_base_quality = 30
    min_mapping_quality = 10
    dominant_frq_threshold = 0.8
    // StrainPhlAn4 arguments
    references = ' '
    secondary_samples = ' '
    secondary_reference = ' '
    trim_sequences = 50
    marker_in_n_samples = 80
    sample_with_n_markers = 80
    secondary_sample_with_n_markers = 80
    sample_with_n_markers_after_filt = 'NA'
    abs_n_markers_thres = false
    abs_n_samples_thres = false
    breadth_thres = 80
    phylophlan_mode = 'fast'
    mutation_rates = false
    non_interactive = false
    treeshrink = false


    // PanPhlAn3 options
    run_panphlan = true // if true, run_metaphlan will be set to true
    panphlan_species = 'Bacteroides_fragilis'
    // panphlan_map arguments
    panphlan_bowtie2_options = '--very-sensitive'
    min_read_length = 70
    th_mismatches = 1
    // panphlan_profiling arguments
    min_coverage = 2
    left_max = 1.25
    right_min = 0.75
    th_non_present = 0.25
    th_present = 0.5
    th_multicopy = 1.5
    strain_similarity_perc = 50
    add_ref = false
    func_annot = ' '




    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                     = null
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'


    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null


    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/biobakerymgx custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/biobakerymgx.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/biobakerymgx profiles: ${params.custom_config_base}/pipeline/biobakerymgx.config")
// }


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        singulairty.runOptions = '-B /gscratch'
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
    uw_hyak_pedslabs      { includeConfig 'conf/uw_hyak_pedslabs.config'      }
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/biobakerymgx'
    author          = """Carson J. Miller"""
    homePage        = 'https://github.com/nf-core/biobakerymgx'
    description     = """Pipeline implementing biobakery tools fmicrobiome analysis of shotgun metagenomic sequences"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
